using System.Linq;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.UserInterface.Controls;

public sealed partial class NeoTabContainer
{
    // Too many computed properties...

    /// <summary>
    ///     If true, the tabs will be displayed horizontally over the top of the contents
    ///     <br />
    ///     If false, the tabs will be displayed vertically to the left of the contents
    /// </summary>
    private bool _horizontal = true;
    /// <inheritdoc cref="_horizontal"/>
    public bool Horizontal
    {
        get => _horizontal;
        set => LayoutChanged(value);
    }

    //TODO private bool _swapSides = false;

    private bool _hScrollEnabled;
    public bool HScrollEnabled
    {
        get => _hScrollEnabled;
        set => ScrollingChanged(value, _vScrollEnabled);
    }

    private bool _vScrollEnabled;
    public bool VScrollEnabled
    {
        get => _vScrollEnabled;
        set => ScrollingChanged(_hScrollEnabled, value);
    }

    private Thickness _containerMargin = new(0);
    public Thickness ContainerMargin
    {
        get => _containerMargin;
        set => ContainerMarginChanged(value);
    }


    /// <summary>
    ///     Changes the layout of the tabs and contents based on the value
    /// </summary>
    /// <param name="horizontal">See <see cref="Horizontal"/></param>
    private void LayoutChanged(bool horizontal)
    {
        _horizontal = horizontal;

        TabContainer.Orientation = horizontal ? LayoutOrientation.Horizontal : LayoutOrientation.Vertical;
        Container.Orientation = horizontal ? LayoutOrientation.Vertical : LayoutOrientation.Horizontal;

        Separator.Margin = horizontal
            ? new Thickness(_containerMargin.Left, 5, _containerMargin.Right, 5)
            : new Thickness(5, _containerMargin.Top, 5, _containerMargin.Bottom);
        var containerMargin = horizontal
            ? new Thickness(_containerMargin.Left, 0, _containerMargin.Right, _containerMargin.Bottom)
            : new Thickness(0, _containerMargin.Top, _containerMargin.Right, _containerMargin.Bottom);
        TabScrollContainer.Margin = containerMargin;
        ContentScrollContainer.Margin = containerMargin;

        TabScrollContainer.HorizontalExpand = horizontal;
        TabScrollContainer.VerticalExpand = !horizontal;
        TabScrollContainer.HScrollEnabled = horizontal;
        TabScrollContainer.VScrollEnabled = !horizontal;
    }

    private void ScrollingChanged(bool hScroll, bool vScroll)
    {
        _hScrollEnabled = hScroll;
        _vScrollEnabled = vScroll;

        ContentScrollContainer.HScrollEnabled = hScroll;
        ContentScrollContainer.VScrollEnabled = vScroll;
    }

    private void ContainerMarginChanged(Thickness value)
    {
        _containerMargin = value;
        LayoutChanged(Horizontal);
    }
}
