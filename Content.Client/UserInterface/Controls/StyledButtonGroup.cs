using System.Linq;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using static Content.Client.Stylesheets.StyleBase;

namespace Content.Client.UserInterface.Controls;

/// Automatically styles a group of HORIZONTAL buttons based on visibility, count, and position
[GenerateTypedNameReferences]
public sealed partial class StyledButtonGroup : BoxContainer
{
    public StyledButtonGroup()
    {
        RobustXamlLoader.Load(this);

        OnChildAdded += _ => UpdateStyles();
        OnChildMoved += _ => UpdateStyles();
        OnChildRemoved += _ => UpdateStyles();
    }

    public void UpdateStyles()
    {
        var children = Children.Where(c => c.Visible && c is Button).ToArray();
        var len = children.Length;

        for (var i = 0; i < len; i++)
        {
            var child = children[i];
            var button = (child as Button)!;

            if (i == 0)
                TryUpdateStyle(button, len == 1 ? "" : ButtonOpenRight);
            else if (i == len - 1)
                TryUpdateStyle(button, ButtonOpenLeft);
            else
                TryUpdateStyle(button, ButtonOpenBoth);
        }
    }

    private bool TryUpdateStyle(Control control, string style)
    {
        if (control.HasStyleClass(style))
            return false;

        control.RemoveStyleClass(ButtonOpenRight);
        control.RemoveStyleClass(ButtonOpenLeft);
        control.RemoveStyleClass(ButtonOpenBoth);

        if (!string.IsNullOrEmpty(style))
            control.AddStyleClass(style);
        else
            return false;
        return true;
    }
}
